package cz.magix.maarifa.ui.composite;

import java.util.Set;

import org.reflections.Reflections;
import org.springframework.context.annotation.Scope;

import com.vaadin.addon.beanvalidation.BeanValidationForm;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.data.Property;
import com.vaadin.data.Property.ValueChangeEvent;
import com.vaadin.data.util.HierarchicalContainer;
import com.vaadin.ui.Button;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Panel;
import com.vaadin.ui.Table;
import com.vaadin.ui.Tree;
import com.vaadin.ui.VerticalLayout;

import cz.magix.maarifa.model.object.AbstractObject;
import cz.magix.maarifa.ui.utils.MaarifaFieldFactory;

@org.springframework.stereotype.Component
@Scope("prototype")
public class ObjectEditor extends CustomComponent {
	@AutoGenerated
	private HorizontalLayout mainLayout;

	@AutoGenerated
	private Panel relationsPanel;

	@AutoGenerated
	private VerticalLayout relationsLayout;

	@AutoGenerated
	private Table relationsTable;

	@AutoGenerated
	private HorizontalLayout relationsToolbarLayout;

	@AutoGenerated
	private Button relationRemove;

	@AutoGenerated
	private Button relationshipCreate;

	@AutoGenerated
	private Panel objectPropertiesPanel;

	@AutoGenerated
	private VerticalLayout objectPropertiesLayout;

	@AutoGenerated
	private Panel selectionTreePanel;

	@AutoGenerated
	private VerticalLayout selectionTreeLayout;

	@AutoGenerated
	private Tree schemaSelectionTree;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	private static final long serialVersionUID = 1L;

	private final BeanValidationForm<AbstractObject> editorForm;

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */
	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public ObjectEditor() {
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// Set tree container
		schemaSelectionTree.setContainerDataSource(createTreeContainer());
		schemaSelectionTree.setImmediate(true);
		for (Object itemId : createTreeContainer().getItemIds()) {
			int index = createTreeContainer().indexOfId(itemId);
			
			Object classObject = createTreeContainer().getIdByIndex(index);
			if (classObject instanceof Class) {
				@SuppressWarnings("unchecked")
				Class<? extends AbstractObject> schemaClass = (Class<? extends AbstractObject>) classObject; 
			
				schemaSelectionTree.setItemCaption(itemId, schemaClass.getSimpleName());
			}
		}
		
		// TODO create change listener reaction
		schemaSelectionTree.addListener(new Property.ValueChangeListener() {
			private static final long serialVersionUID = 1L;

			@Override
			public void valueChange(ValueChangeEvent event) {
				@SuppressWarnings("unchecked")
				Class<AbstractObject> objectClass = (Class<AbstractObject>) schemaSelectionTree.getValue();
				MaarifaFieldFactory.createFormFields(editorForm, objectClass);
			}
		});

		// Add form
		editorForm = new BeanValidationForm<AbstractObject>(AbstractObject.class);
		editorForm.setImmediate(true);
		editorForm.setWriteThrough(false);
		editorForm.setSizeFull();
		editorForm.setFormFieldFactory(new MaarifaFieldFactory());
		objectPropertiesPanel.addComponent(editorForm);
	}
	
	/*
	 * Private methods
	 */
	
	/**
	 * Create main selecting combo box
	 * 
	 * @return
	 */
	private static HierarchicalContainer createTreeContainer() {
		HierarchicalContainer container = new HierarchicalContainer();
		
		Reflections reflections = new Reflections(AbstractObject.class.getPackage().getName());
		Set<Class<? extends AbstractObject>> modelClasses = reflections.getSubTypesOf(AbstractObject.class);

		// Set to the container
		for (Class<? extends AbstractObject> item : modelClasses) {
			container.addItem(item);
			container.setChildrenAllowed(item, false);
		}

		// Create hiearchy
		for (Class<? extends AbstractObject> item : modelClasses) {
			if (!item.getSuperclass().equals(AbstractObject.class)) {
				int superClassIndex = container.indexOfId(item.getSuperclass());
				int classIndex = container.indexOfId(item);
				
				Object superClassItem = container.getIdByIndex(superClassIndex);
				Object classItem = container.getIdByIndex(classIndex);

				if (superClassIndex != -1 && classIndex != -1) {
					container.setChildrenAllowed(superClassItem, true);
					container.setParent(classItem, superClassItem);
				}
			}
		}

		return container;
	}

	@AutoGenerated
	private HorizontalLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new HorizontalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(true);
		mainLayout.setSpacing(true);
		
		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");
		
		// selectionTreePanel
		selectionTreePanel = buildSelectionTreePanel();
		mainLayout.addComponent(selectionTreePanel);
		
		// objectPropertiesPanel
		objectPropertiesPanel = buildObjectPropertiesPanel();
		mainLayout.addComponent(objectPropertiesPanel);
		
		// relationsPanel
		relationsPanel = buildRelationsPanel();
		mainLayout.addComponent(relationsPanel);
		
		return mainLayout;
	}

	@AutoGenerated
	private Panel buildSelectionTreePanel() {
		// common part: create layout
		selectionTreePanel = new Panel();
		selectionTreePanel.setCaption("Select Schema");
		selectionTreePanel.setImmediate(false);
		selectionTreePanel.setWidth("100.0%");
		selectionTreePanel.setHeight("100.0%");
		
		// selectionTreeLayout
		selectionTreeLayout = buildSelectionTreeLayout();
		selectionTreePanel.setContent(selectionTreeLayout);
		
		return selectionTreePanel;
	}

	@AutoGenerated
	private VerticalLayout buildSelectionTreeLayout() {
		// common part: create layout
		selectionTreeLayout = new VerticalLayout();
		selectionTreeLayout.setImmediate(false);
		selectionTreeLayout.setWidth("-1px");
		selectionTreeLayout.setHeight("-1px");
		selectionTreeLayout.setMargin(true);
		selectionTreeLayout.setSpacing(true);
		
		// schemaSelectionTree
		schemaSelectionTree = new Tree();
		schemaSelectionTree.setImmediate(false);
		schemaSelectionTree.setWidth("-1px");
		schemaSelectionTree.setHeight("-1px");
		selectionTreeLayout.addComponent(schemaSelectionTree);
		
		return selectionTreeLayout;
	}

	@AutoGenerated
	private Panel buildObjectPropertiesPanel() {
		// common part: create layout
		objectPropertiesPanel = new Panel();
		objectPropertiesPanel.setCaption("Fill Properties");
		objectPropertiesPanel.setImmediate(false);
		objectPropertiesPanel.setWidth("100.0%");
		objectPropertiesPanel.setHeight("100.0%");
		
		// objectPropertiesLayout
		objectPropertiesLayout = new VerticalLayout();
		objectPropertiesLayout.setImmediate(false);
		objectPropertiesLayout.setWidth("-1px");
		objectPropertiesLayout.setHeight("-1px");
		objectPropertiesLayout.setMargin(true);
		objectPropertiesLayout.setSpacing(true);
		objectPropertiesPanel.setContent(objectPropertiesLayout);
		
		return objectPropertiesPanel;
	}

	@AutoGenerated
	private Panel buildRelationsPanel() {
		// common part: create layout
		relationsPanel = new Panel();
		relationsPanel.setCaption("Create Relationships");
		relationsPanel.setImmediate(false);
		relationsPanel.setWidth("100.0%");
		relationsPanel.setHeight("100.0%");
		
		// relationsLayout
		relationsLayout = buildRelationsLayout();
		relationsPanel.setContent(relationsLayout);
		
		return relationsPanel;
	}

	@AutoGenerated
	private VerticalLayout buildRelationsLayout() {
		// common part: create layout
		relationsLayout = new VerticalLayout();
		relationsLayout.setImmediate(false);
		relationsLayout.setWidth("-1px");
		relationsLayout.setHeight("-1px");
		relationsLayout.setMargin(true);
		relationsLayout.setSpacing(true);
		
		// relationsToolbarLayout
		relationsToolbarLayout = buildRelationsToolbarLayout();
		relationsLayout.addComponent(relationsToolbarLayout);
		
		// relationsTable
		relationsTable = new Table();
		relationsTable.setImmediate(false);
		relationsTable.setWidth("100.0%");
		relationsTable.setHeight("100.0%");
		relationsLayout.addComponent(relationsTable);
		relationsLayout.setExpandRatio(relationsTable, 1.0f);
		
		return relationsLayout;
	}

	@AutoGenerated
	private HorizontalLayout buildRelationsToolbarLayout() {
		// common part: create layout
		relationsToolbarLayout = new HorizontalLayout();
		relationsToolbarLayout.setImmediate(false);
		relationsToolbarLayout.setWidth("-1px");
		relationsToolbarLayout.setHeight("-1px");
		relationsToolbarLayout.setMargin(false);
		
		// relationshipCreate
		relationshipCreate = new Button();
		relationshipCreate.setCaption("Create Relationship");
		relationshipCreate.setImmediate(true);
		relationshipCreate.setWidth("-1px");
		relationshipCreate.setHeight("-1px");
		relationsToolbarLayout.addComponent(relationshipCreate);
		
		// relationRemove
		relationRemove = new Button();
		relationRemove.setCaption("Remove Relationship");
		relationRemove.setImmediate(true);
		relationRemove.setWidth("-1px");
		relationRemove.setHeight("-1px");
		relationsToolbarLayout.addComponent(relationRemove);
		
		return relationsToolbarLayout;
	}

}
